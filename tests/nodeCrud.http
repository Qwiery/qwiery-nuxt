# [1] Node CRUD
###
# @name Create source
# This returns a `token` that you can use to retrieve information later on.
# We have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection.
POST {{baseUrl}}/api/graph/createNode
Content-Type: application/json

{
  "name": "a"
}

> {%
  client.test("A node id is returned", function() {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.name ==="a");
  });
  // TODO: migrate to HTTP Client Response handler API
  // pm.test("A source id is returned", () => {
  //     pm.expect(pm.response.json()).to.have.property('id')
  //     pm.expect(pm.response.json().id).to.be.a('string')
  //     // Set the collection-scope "token" variable to the token received from the API
  //     // This lets us use it in other requests
  //     pm.collectionVariables.set('sourceId', pm.response.json().id)
  // })
  //
%}

###
# @name Source exists
GET {{baseUrl}}/api/graph/nodeExists?
    id={{sourceId}}

> {%
  // TODO: migrate to HTTP Client Response handler API
  //
  //
  // pm.test("Should be false", function () {
  //     pm.expect(pm.response.text()).to.be.eq("true");
  // });
%}

###
# @name Create target
# This returns a `token` that you can use to retrieve information later on.
# We have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection.
POST {{baseUrl}}/api/graph/createNode
Content-Type: application/json

{
  "name": "b"
}

> {%
  // TODO: migrate to HTTP Client Response handler API
  // pm.test("A target id is returned", () => {
  //     pm.expect(pm.response.json()).to.have.property('id')
  //     pm.expect(pm.response.json().id).to.be.a('string')
  //     // Set the collection-scope "token" variable to the token received from the API
  //     // This lets us use it in other requests
  //     pm.collectionVariables.set('targetId', pm.response.json().id)
  // })
  //
%}

###
# @name Target exists
GET http://{{host}}/api/graph/nodeExists?
    id={{targetId}}

> {%
  // TODO: migrate to HTTP Client Response handler API
  //
  //
  // pm.test("Should be false", function () {
  //     pm.expect(pm.response.text()).to.be.eq("true");
  // });
%}

###
# @name Create edge
POST http://{{host}}/api/graph/createEdge
Content-Type: application/json

{
    "sourceId":"{{sourceId}}",
    "targetId":"{{targetId}}",
    "id":"edge1"
}

> {%
  // TODO: migrate to HTTP Client Response handler API
  //
  // const json = pm.response.json();
  //
  // pm.test("Should have the endpoints", function () {
  //     pm.expect(json.sourceId).to.be.eq(pm.variables.get("sourceId"));
  //     pm.expect(json.targetId).to.be.eq(pm.variables.get("targetId"));
  // });
  //
  //
%}

###
# @name Edges between
POST http://{{host}}/api/graph/edgesBetween
Content-Type: application/json

{
    "sourceId":"{{sourceId}}",
    "targetId":"{{targetId}}"
}

> {%
  // TODO: migrate to HTTP Client Response handler API
  //
  // const json = pm.response.json();
  //
  // pm.test("Should be the created edge", function () {
  //     pm.expect(json.length).to.be.eq(1)
  //     pm.expect(json[0].id).to.be.eq("edge1")
  // });
%}

###
# @name Delete node
GET {{baseUrl}}/api/graph/deleteNode?
    id={{targetId}}

> {%
  // TODO: migrate to HTTP Client Response handler API
  //
  // // const json = pm.response.json();
  //
  // // pm.test("Should be a graph", function () {
  // //     pm.expect(json.typeName).to.be.eq('Graph');
  // // });
%}

###
# @name Target exists
GET http://{{host}}/api/graph/nodeExists?
    id={{targetId}}

> {%
  // TODO: migrate to HTTP Client Response handler API
  //
  //
  //
  // pm.test("Should be false", function () {
  //     pm.expect(pm.response.text()).to.be.eq("false");
  // });
%}

###
# @name Edge gone
POST http://{{host}}/api/graph/edgesBetween
Content-Type: application/json

{
    "sourceId":"{{sourceId}}",
    "targetId":"{{targetId}}"
}

> {%
  // TODO: migrate to HTTP Client Response handler API
  //
  // const json = pm.response.json();
  //
  // pm.test("Should have zero length", function () {
  //     pm.expect(json.length).to.be.eq(0);
  // });
%}
