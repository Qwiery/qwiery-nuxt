# Node CRUD

###
# @name Create source

< {%
    import Utils from "./httpUtils.js"
    client.global.set("name", Utils.rnd())
%}
POST {{baseUrl}}/api/graph/createNode
Content-Type: application/json

{
  "name": {{name}}
}

> {%
    import Utils from "./httpUtils.js"
    client.test("A source id is returned", () => {
        client.assert(response.status === 200, "Response status is not 200");
        client.log(JSON.stringify(response.body, null, 3))
        client.assert(response.body.name.toString() === client.global.get("name"));
        client.global.set("sourceId", response.body.id)
    });
%}

###
# @name Source exists
GET {{baseUrl}}/api/graph/nodeExists?id={{sourceId}}

> {%
    client.log(request.url())
    client.assert(response.body === true)
%}

###
# @name Create target
< {%
    import Utils from "./httpUtils.js"
    client.global.set("name", Utils.rnd())
%}
POST {{baseUrl}}/api/graph/createNode
Content-Type: application/json

{
  "name": "{{name}}"
}

> {%
    import Utils from "./httpUtils.js"
    client.test("A target id is returned", () => {
        client.assert(response.status === 200, "Response status is not 200");
        client.log(JSON.stringify(response.body, null, 3))
        client.assert(response.body.name.toString() === client.global.get("name"));
        client.global.set("targetId", response.body.id)
    });
%}

###
# @name Target exists
GET http://{{baseUrl}}/api/graph/nodeExists?
    id={{targetId}}

> {%
    import Utils from "./httpUtils.js"
    client.test("The target should exist", () => {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.toString() === "true");
    });
%}

###
# @name Create edge
POST http://{{baseUrl}}/api/graph/createEdge
Content-Type: application/json

{
    "sourceId":"{{sourceId}}",
    "targetId":"{{targetId}}",
    "id":"edge1"
}

> {%
    import Utils from "./httpUtils.js"
    client.test("The target should exist", () => {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.sourceId === client.global.get("sourceId"));
        client.assert(response.body.targetId === client.global.get("targetId"));
        client.assert(response.body.id === "edge1");
    });
%}

###
# @name Edges between
POST http://{{baseUrl}}/api/graph/edgesBetween
Content-Type: application/json

{
    "sourceId":"{{sourceId}}",
    "targetId":"{{targetId}}"
}

> {%
    import Utils from "./httpUtils.js"
    client.test("The edge should exist", () => {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length === 1);
        client.assert(response.body[0].id === "edge1");
    });
%}

###
# @name Delete node
GET {{baseUrl}}/api/graph/deleteNode?
    id={{targetId}}

###
# @name Target exists
GET http://{{baseUrl}}/api/graph/nodeExists?
    id={{targetId}}

> {%
    import Utils from "./httpUtils.js"
    client.test("The target should not exist", () => {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.toString() === "false");
    });
%}

###
# @name Edge gone
POST http://{{baseUrl}}/api/graph/edgesBetween
Content-Type: application/json

{
    "sourceId":"{{sourceId}}",
    "targetId":"{{targetId}}"
}

> {%
    import Utils from "./httpUtils.js"
    client.test("The edge should not exist", () => {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length === 0);
    });
%}
